// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamPlaytimeTracker;

#nullable disable

namespace SteamPlaytimeTracker.Migrations
{
    [DbContext(typeof(DbAccess))]
    [Migration("20250925000831_AAAA")]
    partial class AAAA
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("SteamPlaytimeTracker.DbObject.SteamAppEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SteamStoreAppId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SteamStoreAppId")
                        .IsUnique();

                    b.ToTable("UserApps");
                });

            modelBuilder.Entity("SteamPlaytimeTracker.Steam.Data.App.AgeUnion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AgeLiteral")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AgeUnion");

                    b.HasAnnotation("Relational:JsonPropertyName", "required_age");
                });

            modelBuilder.Entity("SteamPlaytimeTracker.Steam.Data.App.SteamAppStoreDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgeUnionId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AppId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "steam_appid");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<bool>("IsFree")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "is_free");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("AgeUnionId")
                        .IsUnique();

                    b.ToTable("SteamAppStoreDetails");

                    b.HasAnnotation("Relational:JsonPropertyName", "data");
                });

            modelBuilder.Entity("SteamPlaytimeTracker.Steam.Data.App.SteamStoreApp", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SteamStoreAppDataId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SteamStoreAppDataId")
                        .IsUnique();

                    b.ToTable("SteamStoreApps");
                });

            modelBuilder.Entity("SteamPlaytimeTracker.Steam.Data.App.SteamStoreAppData", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SteamAppStoreDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "success");

                    b.HasKey("Id");

                    b.HasIndex("SteamAppStoreDetailsId")
                        .IsUnique();

                    b.ToTable("SteamStoreAppData");
                });

            modelBuilder.Entity("SteamPlaytimeTracker.Steam.Data.Playtime.PlaytimeSlice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("SessionLength")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("SessionStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("SteamAppEntryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SteamAppEntryId");

                    b.ToTable("PlaytimeSlices");
                });

            modelBuilder.Entity("SteamPlaytimeTracker.DbObject.SteamAppEntry", b =>
                {
                    b.HasOne("SteamPlaytimeTracker.Steam.Data.App.SteamStoreApp", "StoreDetails")
                        .WithOne()
                        .HasForeignKey("SteamPlaytimeTracker.DbObject.SteamAppEntry", "SteamStoreAppId");

                    b.Navigation("StoreDetails");
                });

            modelBuilder.Entity("SteamPlaytimeTracker.Steam.Data.App.SteamAppStoreDetails", b =>
                {
                    b.HasOne("SteamPlaytimeTracker.Steam.Data.App.AgeUnion", "Age")
                        .WithOne()
                        .HasForeignKey("SteamPlaytimeTracker.Steam.Data.App.SteamAppStoreDetails", "AgeUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Age");
                });

            modelBuilder.Entity("SteamPlaytimeTracker.Steam.Data.App.SteamStoreApp", b =>
                {
                    b.HasOne("SteamPlaytimeTracker.Steam.Data.App.SteamStoreAppData", "AppData")
                        .WithOne()
                        .HasForeignKey("SteamPlaytimeTracker.Steam.Data.App.SteamStoreApp", "SteamStoreAppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("SteamPlaytimeTracker.Steam.Data.App.SteamStoreAppData", b =>
                {
                    b.HasOne("SteamPlaytimeTracker.Steam.Data.App.SteamAppStoreDetails", "StoreData")
                        .WithOne()
                        .HasForeignKey("SteamPlaytimeTracker.Steam.Data.App.SteamStoreAppData", "SteamAppStoreDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreData");
                });

            modelBuilder.Entity("SteamPlaytimeTracker.Steam.Data.Playtime.PlaytimeSlice", b =>
                {
                    b.HasOne("SteamPlaytimeTracker.DbObject.SteamAppEntry", "SteamAppEntry")
                        .WithMany("PlaytimeSlices")
                        .HasForeignKey("SteamAppEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SteamAppEntry");
                });

            modelBuilder.Entity("SteamPlaytimeTracker.DbObject.SteamAppEntry", b =>
                {
                    b.Navigation("PlaytimeSlices");
                });
#pragma warning restore 612, 618
        }
    }
}
